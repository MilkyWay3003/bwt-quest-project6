swagger: "2.0"
info:
  description: "Booking API"
  version: 1.0.0
  title: Booking API
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: hotels
  description: Information about hotels
  externalDocs:
    description: Find out more
    url: "http://swagger.io"
- name: user
  description: Access to Booking API
  externalDocs:
    description: Find out more about our store
    url: "http://swagger.io"
schemes:
- http
securityDefinitions:
  Bearer:
    description: |
     For accessing the API a valid token must be passed in all the queries in
     the 'Authorization' header.

     A valid token is generated by the API and returned as answer of a call
     to the route /login giving a valid user & password.

     The following syntax must be used in the 'Authorization' header :
                    Value: apiKey
    type: apiKey
    name: Authorization
    in: headers
paths:
  /api/hotels:
    post:
      tags:
      - hotels
      summary: Add a new hotels to the store
      description: ""
      operationId: hotels.store
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Hotel object that needs to be added to the store
        required: false
        schema:
          $ref: "#/definitions/Hotel"
      responses:
        "200":
          description: Description of hotel
        "401":
          description: Unauthorized action
      security:
      - Bearer: []
    get:
      tags:
      - hotels
      summary: Show list of hotels
      x-swagger-router-controller: SampleController
      description: ""
      operationId: hotels.index
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: List hotels
        "401":
          description: Unauthorized action
      security:
      - Bearer: []
  /api/hotels/{hotels}:
    get:
      tags:
      - hotels
      summary: Find hotel by ID
      description: Returns a hotel
      operationId: hotels.show
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: hotelId
        in: path
        description: ID of hotel to return
        required: true
        type: integer
        format: int64
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Hotel"
        "400":
          description: Invalid ID supplied
        "401":
            description: Unauthorized action
        "404":
          description: Hotel not found
      security:
      - Bearer: []
    put:
      tags:
      - hotels
      summary: Update an existing hotel
      description: ""
      operationId: hotels.update
      consumes:
      - application/json    l
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Hotel object that needs to be added to the store
        required: false
        schema:
          $ref: "#/definitions/Hotel"
      responses:
        "200":
          description: Update hotel
        "401":
          description: Unauthorized action
        "405":
          description: Validation exception
      security:
      - Bearer: []
    delete:
      tags:
      - hotels
      summary: Deletes a hotel
      description: ""
      operationId: hotels.destroy
      consumes:
      - multipart/form-data
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: hotelId
        in: path
        description: Hotel id to delete
        required: true
        type: integer
        format: int64
      responses:
        "400":
          description: Invalid hotel value
        "401":
          description: Unauthorized action
      security:
      - Bearer: []
  /api/user:
    get:
      tags:
      - user
      summary: Authentication user
      description: ""
      operationId:
      produces:
      - application/json
      parameters:
      - login: email
        in: path
        description: "Login"
        required: true
        type: string
      - password: email
        in: path
        description: "Password"
        required: true
        type: string
      security:
      - Bearer: []
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid email supplied
        "404":
          description: User not found
  /api/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      description: ""
      operationId: login
      produces:
      - application/json
      parameters:
      - login: email
        in: query
        description: The user email for login
        required: false
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        "400":
          description: Invalid username/password supplied
  /api/logout:
    post:
      tags:
      - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logout
      produces:
      - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /api/register:
    post:
      tags:
      - user
      summary: Get user by user name
      description: ""
      operationId: register
      produces:
      - application/json
      parameters:
      - login: email
        in: path
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
definitions:
  User:
    required:
    - name
    properties:
      id:
        type: integer
        format: int64
        example: 1
      name:
        type: string
      example: Administrator
      email:
        type: string
        example: admin@test.com
      password:
        type: string
        example: toptal
      api_token:
        type: string
    xml: User
  Hotel:
    required:
    - name
    - country
    - city
    - postcode
    - address
    - description
    - rating
    - image
    properties:
      id:
        type: integer
        format: int64
        example: 1
      name:
        type: string
        example: Dream Hostel
      country:
        type: string
        example: Ukraine
      city:
        type: string
        example: Lviv
      postcode:
        type: string
        example: 79OOO
      address:
        type: string
        example: 5 Krakivska Street
      description:
        type: string
        example: Set in Lviv, DREAM Hostel Lviv is a 1-minute walk from The Armenian Cathedral and provides facilities like shared lounge and bar. Located around a 1-minute walk from The Palace of Armenian Archbishops, the hostel with free WiFi is also 100 m away from Rynok Square. The property is situated in the Lviv City Center district.
      rating:
          type: decimal
          example: 9.50
      image:
        type: string
        example: https://lorempixel.com/200/200/cats/?78383
    xml:
      name: Hotel
  ApiResponse:
    properties:
      status:
        type: integer
        format: int32
      error:
        type: string
      data:
        type: collection
    xml:
      name: "##default"
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
